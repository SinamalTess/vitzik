{"version":3,"file":"static/js/655.4e872488.chunk.js","mappings":"yBAEA,IAGIA,EADAC,EAAc,EAIlBC,KAAKC,UAAY,SAACC,GACd,MAAmDA,EAAQC,KAAnDC,EAAR,EAAQA,KAAR,IAAcC,QAAAA,OAAd,MAAwB,EAAxB,MAA2BC,gBAAAA,OAA3B,MAA6C,EAA7C,EAEa,UAATF,EACAG,EAAWF,EAASC,GACJ,gBAATF,GACPI,cAAcV,GACdW,YAAY,CACRL,KAAAA,EACAM,KAAML,IAEVN,EAAcM,GACE,SAATD,GACPO,IACAF,YAAY,CACRL,KAAAA,EACAM,KAAM,KAEM,UAATN,GACPI,cAAcV,GACdW,YAAY,CACRL,KAAAA,EACAM,KAAMX,KAEM,YAATK,GACPI,cAAcV,GACdS,EAAWF,EAASC,IACJ,YAATF,GACPK,YAAY,CACRL,KAAAA,EACAM,KAAMX,GAGjB,EAED,IAAMY,EAAY,WACdH,cAAcV,GACdC,EAAc,CACjB,EAEKQ,EAAa,SAACF,EAAiBC,GACjCR,EAAQc,aAAY,WAAO,IAAD,EACtBH,YAAY,CACRC,KAAI,UAAEX,SAAF,QAAiBM,EACrBD,KAAM,UAGVL,GApDS,GAoD8BO,CAC1C,GArDY,GAsDhB,C","sources":["workers/intervalWorker.ts"],"sourcesContent":["import { IntervalWorkerMessage } from '../types/IntervalWorkerCode'\n\nconst FPS = 20\nconst interval = 1000 / FPS\nlet timeElapsed = 0\nlet timer: number | NodeJS.Timeout | undefined\n\n// eslint-disable-next-line no-restricted-globals\nself.onmessage = (message) => {\n    const { code, startAt = 0, midiSpeedFactor = 1 } = message.data as IntervalWorkerMessage\n\n    if (code === 'start') {\n        startTimer(startAt, midiSpeedFactor)\n    } else if (code === 'updateTimer') {\n        clearInterval(timer)\n        postMessage({\n            code,\n            time: startAt,\n        })\n        timeElapsed = startAt\n    } else if (code === 'stop') {\n        stopTimer()\n        postMessage({\n            code,\n            time: 0,\n        })\n    } else if (code === 'pause') {\n        clearInterval(timer)\n        postMessage({\n            code,\n            time: timeElapsed,\n        })\n    } else if (code === 'restart') {\n        clearInterval(timer)\n        startTimer(startAt, midiSpeedFactor)\n    } else if (code === 'getTime') {\n        postMessage({\n            code,\n            time: timeElapsed,\n        })\n    }\n}\n\nconst stopTimer = () => {\n    clearInterval(timer)\n    timeElapsed = 0\n}\n\nconst startTimer = (startAt: number, midiSpeedFactor: number) => {\n    timer = setInterval(() => {\n        postMessage({\n            time: timeElapsed ?? startAt,\n            code: 'start',\n        })\n\n        timeElapsed = timeElapsed + interval / midiSpeedFactor\n    }, interval)\n}\n"],"names":["timer","timeElapsed","self","onmessage","message","data","code","startAt","midiSpeedFactor","startTimer","clearInterval","postMessage","time","stopTimer","setInterval"],"sourceRoot":""}